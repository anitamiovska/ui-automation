pipeline {
    agent any

    triggers {
        pollSCM('*/1 * * * *')
    }

    parameters {
        string(name: 'environment', defaultValue: 'staging', description: 'Running tests')
    }
    //Used this as a reference to create stop the execution on failure https://itnext.io/jenkins-tutorial-part-4-post-actions-e5d0ef1e3c39
    //https://stackoverflow.com/questions/51637782/how-to-exit-from-the-jenkins-pipeline-if-a-stage-sets-build-fail-unstable-status
    
    stages {    

        stage('Build') {
            steps{
                echo "Building application"
            }
            post {
                success {
                    sh "sh ./send_notification.sh 'Build success' 0"
                }
                failure {
                    script{
                        sh "sh ./send_notification.sh 'Build failure' 1"
                        //error "Failed, exiting now..."
                    }
                }
            }
        }

        stage('deploy_hub') {
            steps{
                echo "Deploying HUB"
                sh "docker run -d -p 4444:4444 --net test-automation-setup --rm --name selenium-hub selenium/hub:4.1.0-20211209"
                sh "docker run -d --rm --name chrome --net test-automation-setup -v /dev/shm:/dev/shm -e HUB_HOST=selenium-hub -e HUB_PORT=4444 selenium/node-chrome:3.141.59-20210929"
                sh "docker run -d --rm --name firefox --net test-automation-setup -v /dev/shm:/dev/shm -e HUB_HOST=selenium-hub -e HUB_PORT=4444 selenium/node-firefox:3.141.59-20210929"
            }
            post {
                success {
                    sh "sh ./send_notification.sh 'HUB deployment success' 0"
                }
                failure {
                    script{
                        sh "sh ./send_notification.sh 'HUB deployment failure' 1"
                        //error "Failed, exiting now..."
                    }
                }
            }
        }

        stage('Deploy_staging') {
            steps {
                script{
                    deploy('staging')
                }
            }
            post {
                success {
                    sh "sh ./send_notification.sh 'Staging deployed' 0"
                }
                failure {
                    script{
                        sh "sh ./send_notification.sh 'Failed to deploy stage' 1"
                        //error "Failed, exiting now..."
                    }
                }
            }
        }

        stage('Deploy_production') {
           steps {
                script{
                    deploy('production')
                }
            }
            post {
                success {
                    sh "sh ./send_notification.sh 'Production deployed' 0"
                }
                failure {
                    script{
                        sh "sh ./send_notification.sh 'Failed to deploy stage' 1"
                        //error "Failed, exiting now..."
                    }
                }
            }
        }

        stage('Test_staging') {
            //parallel from https://www.jenkins.io/doc/book/pipeline/syntax/#parallel
            parallel {
                stage('Test_staging_chrome'){
                    steps {
                        script{
                            test('Test_staging_chrome', 'chrome')
                        }
                    }
                    post {
                        success {
                            sh "sh ./send_notification.sh 'Test run on staging success' 0"
                        }
                        failure {
                            script{
                                sh "sh ./send_notification.sh 'Failed to run tests on staging' 1"
                               // error "Failed, exiting now..."
                            }
                        }
                    }
                }
                stage('Test_staging_firefox'){
                    steps {
                        script {
                            test('Test_staging_firefox', 'firefox')
                        }
                    }
                    post {
                        success {
                            sh "sh ./send_notification.sh 'Test run on staging success' 0"
                        }
                        failure {
                            script{
                                sh "sh ./send_notification.sh 'Failed to run tests on staging' 1"
                                //error "Failed, exiting now..."
                            }
                        }
                    }
                }
            }
        }

        stage('Test_production') {
            parallel{
                stage('Test_production_chrome'){
                    steps {
                        script{
                            test('Test_prod_chrome', 'chrome')
                        }
                    }
                    post {
                        success {
                            sh "sh ./send_notification.sh 'Test run on staging success' 0"
                        }
                        failure {
                            script{
                                sh "sh ./send_notification.sh 'Failed to run tests on staging' 1"
                                //error "Failed, exiting now..."
                            }
                        }
                    }
                }
                stage('Test_production_firefox'){
                    steps {
                        script{
                            test('Test_prod_firefox', 'firefox')
                        }
                    }
                    post {
                        success {
                            sh "sh ./send_notification.sh 'Test run on staging success' 0"
                        }
                        failure {
                            script{
                                sh "sh ./send_notification.sh 'Failed to run tests on staging' 1"
                                //error "Failed, exiting now..."
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sh "docker rm -f selenium-hub"
            sh "docker rm -f chrome"
            sh "docker rm -f firefox"
        }
    }
}

def deploy(String environment){
    echo "Deployment to ${environment} environment"
    }


def test(String environment, String browser){
    echo "Tests running on ${environment} environment with ${browser}"
    //sh "docker run -d -t --network=test-automation-setup --name mvn-tests-${environment} anitamio/mvn_tests:latest"
    //sh "docker pull anitamio/mvn_tests:latest"
    //sh "docker exec mvn-tests-${environment} mvn clean test -Dbrowser=${browser} -DgridURL=selenium-hub:4444"
    //sh "docker exec mvn-tests-${environment} mvn io.qameta.allure:allure-maven:report"
    //sh "docker exec mvn-tests-${environment} rm -rf test-results/*"
    //sh "docker exec mvn-tests-${environment} cp -R target/site/allure-maven-plugin test-results"
}

